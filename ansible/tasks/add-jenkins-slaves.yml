---
# read groups['dxr-builders'] for list of slaves
#   create slave config file
#   if get-node then upate_node
#   else add_node
# cannot remove nodes, must do manually
- name: Create slave config files
  template: src=jenkins-slave.j2
            dest=/data/slaves/{{ hostvars[item]['inventory_hostname_short'] }}
            owner=root
            group=root
            mode=0600
  with_items: groups['dxr-builders']
  register: slave_configs
  tags: ['add-slaves']

- name: Find jenkins ssh port number
  shell: "curl --head --silent http://localhost:8080/{{ jenkins_prefix }}/cli/ | awk -F: '/^X-SSH-Endpoint/ {print $3}'"
  register: jenkins_ssh_port
  changed_when: False
  tags: ['add-slaves']

- name: Verify slave nodes
  sudo: no
  shell: "ssh -l {{ username | mandatory }} -p {{ jenkins_ssh_port.stdout }} localhost get-node {{ hostvars[item.item]['inventory_hostname_short'] }} >> /dev/null"
  when: slave_configs.changed
  with_items: slave_configs.results
  register: get_node
  ignore_errors: True
  tags: ['add-slaves']

- name: Update missing slave nodes
  sudo: no
  shell: "ssh -l {{ username | mandatory }} -p {{ jenkins_ssh_port.stdout }} localhost update-node {{ hostvars[item.item.item]['inventory_hostname_short'] }} < /data/slaves/{{ hostvars[item.item.item]['inventory_hostname_short'] }}"
  when: item.changed and not item.rc != 0
  with_items: get_node.results
  tags: ['add-slaves']

- name: Create missing slave nodes
  sudo: no
  shell: "ssh -l {{ username | mandatory }} -p {{ jenkins_ssh_port.stdout }} localhost create-node {{ hostvars[item.item.item]['inventory_hostname_short'] }} < /data/slaves/{{ hostvars[item.item.item]['inventory_hostname_short'] }}"
  when: item.changed and (item.stderr.find('No such node') != -1)
  with_items: get_node.results
  tags: ['add-slaves']
